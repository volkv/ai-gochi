package com.hackathon.echo.data

data class DemoStep(
    val action: String,
    val inputText: String?,
    val expectedEmotion: EmotionType,
    val duration: Int,
    val presenterNote: String
)

object DemoScenario {
    val steps = listOf(
        DemoStep(
            action = "intro",
            inputText = null,
            expectedEmotion = EmotionType.NEUTRAL,
            duration = 30,
            presenterNote = "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≠—Ö–æ - –ø–æ–∫–∞–∂–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, –æ–±—ä—è—Å–Ω–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é"
        ),
        DemoStep(
            action = "joy_demo",
            inputText = "–°–µ–≥–æ–¥–Ω—è –∑–∞—â–∏—Ç–∏–ª –¥–∏–ø–ª–æ–º –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ!",
            expectedEmotion = EmotionType.JOY,
            duration = 75,
            presenterNote = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–¥–æ—Å—Ç–∏ - –ø–æ–∫–∞–∂–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–æ–ª–æ—Ç—ã–µ –∏—Å–∫–æ—Ä–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—É—é –ø–æ–≥–æ–¥—É"
        ),
        DemoStep(
            action = "sadness_demo",
            inputText = "–û—á–µ–Ω—å –ø–µ—Ä–µ–∂–∏–≤–∞—é –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ–π...",
            expectedEmotion = EmotionType.SADNESS,
            duration = 60,
            presenterNote = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É—Å—Ç–∏ - –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∏–Ω–∏–µ —Ü–≤–µ—Ç–∞, —Ç—É—á–∏, –≤—è–ª–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
        ),
        DemoStep(
            action = "thoughtful_demo",
            inputText = "–†–∞–∑–º—ã—à–ª—è—é –æ —Å–≤–æ–µ–º –±—É–¥—É—â–µ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏",
            expectedEmotion = EmotionType.THOUGHTFUL,
            duration = 65,
            presenterNote = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π - —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è –∞—É—Ä–∞, –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∞, —Å–≤–µ—á–∞"
        ),
        DemoStep(
            action = "neutral_demo",
            inputText = "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ",
            expectedEmotion = EmotionType.NEUTRAL,
            duration = 55,
            presenterNote = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - —Å–ø–æ–∫–æ–π–Ω—ã–µ —Ç–æ–Ω–∞, —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        ),
        DemoStep(
            action = "transition_demo",
            inputText = "–ü–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –º–µ—á—Ç—ã!",
            expectedEmotion = EmotionType.JOY,
            duration = 45,
            presenterNote = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"
        )
    )
    
    val totalDemoTime = steps.sumOf { it.duration }
    
    fun getStepByIndex(index: Int): DemoStep? {
        return steps.getOrNull(index)
    }
    
    fun getCurrentStepNote(currentIndex: Int): String {
        return steps.getOrNull(currentIndex)?.presenterNote ?: "–î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    }
}

data class DemoMessagePair(
    val userMessage: String,
    val petResponse: String
)

object DemoScriptedPhrases {
    val joyPairs = listOf(
        DemoMessagePair(
            "–°–µ–≥–æ–¥–Ω—è –∑–∞—â–∏—Ç–∏–ª –¥–∏–ø–ª–æ–º –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ!",
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π —É—Å–ø–µ—Ö –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üåü"
        ),
        DemoMessagePair(
            "–ü–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –º–µ—á—Ç—ã!",
            "–≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –†–∞–∑–¥–µ–ª—è—é —Ç–≤–æ–µ —Å—á–∞—Å—Ç—å–µ! ‚ú®"
        ),
        DemoMessagePair(
            "–í—Å—Ç—Ä–µ—Ç–∏–ª —Å—Ç–∞—Ä–æ–≥–æ –¥—Ä—É–≥–∞, –±—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ!",
            "–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏! üéâ"
        ),
        DemoMessagePair(
            "–í—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ—é –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É!",
            "–£—Ä–∞! –î–∞–≤–∞–π –æ—Ç–ø—Ä–∞–∑–¥–Ω—É–µ–º –≤–º–µ—Å—Ç–µ!"
        )
    )
    
    val sadnessPairs = listOf(
        DemoMessagePair(
            "–û—á–µ–Ω—å –ø–µ—Ä–µ–∂–∏–≤–∞—é –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ–π...",
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üíô"
        ),
        DemoMessagePair(
            "–ü–æ—Å—Å–æ—Ä–∏–ª—Å—è —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º",
            "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç—è–∂–µ–ª–æ"
        ),
        DemoMessagePair(
            "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º –∏ —É—Å—Ç–∞–≤—à–∏–º",
            "–Ø —Ä—è–¥–æ–º. –¢—ã –Ω–µ –æ–¥–∏–Ω –≤ —ç—Ç–æ–º üíô"
        ),
        DemoMessagePair(
            "–ù–µ –ø–æ–ª—É—á–∏–ª —Ä–∞–±–æ—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—á–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª",
            "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º? –Ø —Å–ª—É—à–∞—é"
        )
    )
    
    val thoughtfulPairs = listOf(
        DemoMessagePair(
            "–†–∞–∑–º—ã—à–ª—è—é –æ —Å–≤–æ–µ–º –±—É–¥—É—â–µ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏",
            "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —Ä–∞—Å—Ç–∏ ü§î"
        ),
        DemoMessagePair(
            "–î—É–º–∞—é –æ —Å–º—ã—Å–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π",
            "–ì–ª—É–±–æ–∫–∏–µ –º—ã—Å–ª–∏ –≤–µ–¥—É—Ç –∫ –º—É–¥—Ä–æ—Å—Ç–∏"
        ),
        DemoMessagePair(
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤–æ–∏ –ø–æ—Å—Ç—É–ø–∫–∏ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
            "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è - –ø–∏—â–∞ –¥–ª—è –¥—É—à–∏"
        ),
        DemoMessagePair(
            "–ü—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –≤—ã–±—Ä–∞–ª –ø—É—Ç—å",
            "–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ—Ä–∞–∑–º—ã—Å–ª–∏–º –Ω–∞–¥ —ç—Ç–∏–º üß†"
        )
    )
    
    val neutralPairs = listOf(
        DemoMessagePair(
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
        ),
        DemoMessagePair(
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
            "–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –ª—é–±—ã–µ —Ç–≤–æ–∏ –º—ã—Å–ª–∏"
        ),
        DemoMessagePair(
            "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ",
            "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?"
        ),
        DemoMessagePair(
            "–ü—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è",
            "–ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ?"
        )
    )
    
    val joyPhrases = joyPairs.map { it.userMessage }
    val sadnessPhrases = sadnessPairs.map { it.userMessage }
    val thoughtfulPhrases = thoughtfulPairs.map { it.userMessage }
    val neutralPhrases = neutralPairs.map { it.userMessage }
    
    fun getPhrasesByEmotion(emotion: EmotionType): List<String> {
        return when (emotion) {
            EmotionType.JOY -> joyPhrases
            EmotionType.SADNESS -> sadnessPhrases
            EmotionType.THOUGHTFUL -> thoughtfulPhrases
            EmotionType.NEUTRAL -> neutralPhrases
        }
    }
    
    val demoCycleEmotions = listOf(
        EmotionType.JOY,
        EmotionType.SADNESS,
        EmotionType.THOUGHTFUL,
        EmotionType.NEUTRAL
    )
    
    fun getPairsByEmotion(emotion: EmotionType): List<DemoMessagePair> {
        return when (emotion) {
            EmotionType.JOY -> joyPairs
            EmotionType.SADNESS -> sadnessPairs
            EmotionType.THOUGHTFUL -> thoughtfulPairs
            EmotionType.NEUTRAL -> neutralPairs
        }
    }
    
    fun getDemoMessagePairByCycle(step: Int): DemoMessagePair {
        val emotionIndex = step % demoCycleEmotions.size
        val emotion = demoCycleEmotions[emotionIndex]
        val pairs = getPairsByEmotion(emotion)
        val pairIndex = (step / demoCycleEmotions.size) % pairs.size
        return pairs[pairIndex]
    }
    
    fun getDemoPhraseByCycle(step: Int): String {
        val emotionIndex = step % demoCycleEmotions.size
        val emotion = demoCycleEmotions[emotionIndex]
        return getRandomPhrase(emotion)
    }
    
    fun getDemoEmotionByCycle(step: Int): EmotionType {
        return demoCycleEmotions[step % demoCycleEmotions.size]
    }
    
    fun getRandomPhrase(emotion: EmotionType): String {
        return getPhrasesByEmotion(emotion).random()
    }
    
    fun getScriptedResponseForMessage(userMessage: String, emotion: EmotionType): String? {
        val pairs = getPairsByEmotion(emotion)
        return pairs.find { it.userMessage == userMessage }?.petResponse
    }
}

object PresentationGuide {
    val segments = mapOf(
        "opening" to "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI –¢–∞–º–∞–≥–æ—á–∏ '–≠—Ö–æ' (30 —Å–µ–∫)",
        "joy_demo" to "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–¥–æ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1:15)",
        "sadness_demo" to "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1:00)",
        "thoughtful_demo" to "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥—É–º—á–∏–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1:05)",
        "calm_demo" to "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (55 —Å–µ–∫)",
        "transitions" to "–ü–æ–∫–∞–∑ –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (45 —Å–µ–∫)",
        "closing" to "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–ø—Ä–æ—Å—ã –∂—é—Ä–∏ (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)"
    )
    
    val keyPointsForJury = listOf(
        "–≠—Ö–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π",
        "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –º–µ–Ω—è—é—Ç—Å—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–∏—Ç–æ–º—Ü–∞",
        "–ê–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∂–∏–≤–æ–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã—Ä–∞–∂–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏",
        "–ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫"
    )
    
    val fallbackPlan = listOf(
        "–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",
        "–ï—Å–ª–∏ –∑–≤—É–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–∞–º–∏",
        "–ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–æ—Ä–º–æ–∑—è—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≥–ª—é—á–∏—Ç - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —ç–º–æ—Ü–∏–π",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω - –≤–∏–¥–µ–æ —Å —ç–∫—Ä–∞–Ω–∞ –∫–∞–∫ backup"
    )
    
    val deviceCheckList = listOf(
        "APK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ–º–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "–ó–≤—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (50-60%)",
        "–Ø—Ä–∫–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º",
        "–ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤—ã–ø–∏—Å–∞–Ω—ã –Ω–∞ –±—É–º–∞–≥–µ",
        "–ó–∞–ø–∞—Å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º APK –≥–æ—Ç–æ–≤–æ",
        "–í–∏–¥–µ–æ-backup –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
        "–ó–∞—Ä—è–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (–º–∏–Ω–∏–º—É–º 70%)",
        "–†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' –≤–∫–ª—é—á–µ–Ω –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
    )
    
    fun getTimingForStep(stepIndex: Int): String {
        val step = DemoScenario.steps.getOrNull(stepIndex)
        return if (step != null) {
            "${step.duration} —Å–µ–∫—É–Ω–¥ –Ω–∞ ${step.presenterNote}"
        } else {
            "–î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        }
    }
    
    fun getTotalTimeRemaining(currentStep: Int): Int {
        return DemoScenario.steps.drop(currentStep).sumOf { it.duration }
    }
}