package com.hackathon.echo.data

import android.content.Context
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.*

data class PersonalizedGreeting(
    val greeting: String,
    val shouldShow: Boolean = true,
    val priority: Int = 0
)

class MemorySystem(private val context: Context) {
    private val preferences = EchoPreferences(context)
    
    fun generatePersonalizedGreeting(): PersonalizedGreeting {
        if (!preferences.isPersonalizedGreetingsEnabled()) {
            return PersonalizedGreeting(getDefaultGreeting(), false)
        }
        
        val lastInteractionDate = preferences.getLastInteractionDate()
        val friendshipDays = preferences.getFriendshipDays()
        val recentEmotions = preferences.getRecentEmotions(3)
        val usageStats = preferences.getUsageStats()
        
        return when {
            isFirstMeeting() -> PersonalizedGreeting(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≠—Ö–æ, —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
                priority = 10
            )
            
            isLongTimeNoSee(lastInteractionDate) -> PersonalizedGreeting(
                generateLongAbsenceGreeting(lastInteractionDate),
                priority = 9
            )
            
            isNewDay(lastInteractionDate) -> PersonalizedGreeting(
                generateNewDayGreeting(recentEmotions, friendshipDays),
                priority = 8
            )
            
            hasRecentEmotions(recentEmotions) -> PersonalizedGreeting(
                generateEmotionBasedGreeting(recentEmotions),
                priority = 7
            )
            
            hasMilestoneAchievement(usageStats) -> PersonalizedGreeting(
                generateMilestoneGreeting(friendshipDays, usageStats),
                priority = 6
            )
            
            else -> PersonalizedGreeting(
                getContextualGreeting(usageStats),
                priority = 5
            )
        }
    }
    
    fun getPersonalizedResponse(currentEmotion: EmotionType, userInput: String): String {
        val recentEmotions = preferences.getRecentEmotions(5)
        val usageStats = preferences.getUsageStats()
        
        return when {
            hasEmotionalPattern(recentEmotions, currentEmotion) -> 
                getPatternBasedResponse(currentEmotion, recentEmotions)
            
            isDetailedInput(userInput) -> 
                getDetailedInputResponse(currentEmotion, userInput)
            
            isFirstTimeEmotion(currentEmotion, usageStats) ->
                getFirstTimeEmotionResponse(currentEmotion)
            
            else -> ResponseBank.getRandomResponse(currentEmotion)
        }
    }
    
    fun getReflectiveQuestion(emotion: EmotionType): String? {
        val recentEmotions = preferences.getRecentEmotions(3)
        if (recentEmotions.isEmpty()) return null
        
        val lastEmotion = try {
            EmotionType.valueOf(recentEmotions.last().emotion)
        } catch (e: Exception) {
            return null
        }
        
        return when {
            lastEmotion != emotion && isSignificantEmotionChange(lastEmotion, emotion) -> {
                getTransitionQuestion(lastEmotion, emotion)
            }
            
            recentEmotions.size >= 2 && allSameEmotion(recentEmotions) -> {
                getContinuityQuestion(emotion)
            }
            
            else -> null
        }
    }
    
    private fun isFirstMeeting(): Boolean {
        return preferences.getFriendshipDays() == 0 && 
               preferences.getUsageStats().totalInteractions == 0
    }
    
    private fun isLongTimeNoSee(lastInteractionDate: LocalDate?): Boolean {
        if (lastInteractionDate == null) return false
        val daysSinceLastInteraction = ChronoUnit.DAYS.between(lastInteractionDate, LocalDate.now())
        return daysSinceLastInteraction >= 3
    }
    
    private fun isNewDay(lastInteractionDate: LocalDate?): Boolean {
        if (lastInteractionDate == null) return false
        return !lastInteractionDate.isEqual(LocalDate.now())
    }
    
    private fun hasRecentEmotions(recentEmotions: List<StoredEmotion>): Boolean {
        return recentEmotions.isNotEmpty()
    }
    
    private fun hasMilestoneAchievement(stats: UsageStats): Boolean {
        val friendshipDays = preferences.getFriendshipDays()
        return friendshipDays in listOf(1, 7, 30, 100) || 
               stats.totalInteractions in listOf(10, 25, 50, 100)
    }
    
    private fun generateLongAbsenceGreeting(lastInteractionDate: LocalDate?): String {
        val daysSince = ChronoUnit.DAYS.between(lastInteractionDate, LocalDate.now()).toInt()
        
        return when {
            daysSince >= 7 -> "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ—à–ª–∞ —Ü–µ–ª–∞—è –Ω–µ–¥–µ–ª—è! –ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–µ–ª —ç—Ç–æ –≤—Ä–µ–º—è? –°–∫—É—á–∞–ª –ø–æ –Ω–∞—à–∏–º –±–µ—Å–µ–¥–∞–º üåü"
            daysSince >= 3 -> "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ —ç—Ç–∏ –¥–Ω–∏?"
            else -> "–û, —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è! –†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! üòä"
        }
    }
    
    private fun generateNewDayGreeting(recentEmotions: List<StoredEmotion>, friendshipDays: Int): String {
        val lastEmotion = recentEmotions.lastOrNull()
        
        return when {
            lastEmotion != null -> {
                val emotionType = try {
                    EmotionType.valueOf(lastEmotion.emotion)
                } catch (e: Exception) {
                    null
                }
                
                when (emotionType) {
                    EmotionType.JOY -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–º–Ω—é, –≤—á–µ—Ä–∞ —Ç—ã –¥–µ–ª–∏–ª—Å—è —Ä–∞–¥–æ—Å—Ç—å—é! –ù–∞–¥–µ—é—Å—å, —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å? ‚ú®"
                    EmotionType.SADNESS -> "–ü—Ä–∏–≤–µ—Ç... –ö–∞–∫ –¥–µ–ª–∞ —Å —Ç–µ–º, —á—Ç–æ –≤—á–µ—Ä–∞ —Ç–µ–±—è —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–ª–æ? –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üíô"
                    EmotionType.THOUGHTFUL -> "–ü—Ä–∏–≤–µ—Ç, –º—ã—Å–ª–∏—Ç–µ–ª—å! –ö–∞–∫ –¥–µ–ª–∞ —Å —Ç–µ–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ –∑–∞–Ω–∏–º–∞–ª–∏ —Ç–µ–±—è –≤—á–µ—Ä–∞? ü§î"
                    EmotionType.CALM -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–¥–µ—é—Å—å, —Ç–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, —á—Ç–æ –±—ã–ª–æ —É —Ç–µ–±—è –≤—á–µ—Ä–∞, –æ—Å—Ç–∞–µ—Ç—Å—è —Å —Ç–æ–±–æ–π üïäÔ∏è"
                    else -> getTimeBasedGreeting(friendshipDays)
                }
            }
            else -> getTimeBasedGreeting(friendshipDays)
        }
    }
    
    private fun generateEmotionBasedGreeting(recentEmotions: List<StoredEmotion>): String {
        val dominantEmotion = recentEmotions
            .groupBy { it.emotion }
            .maxByOrNull { it.value.size }?.key
        
        return when (dominantEmotion) {
            "JOY" -> "–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É —Ç–µ–±—è –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–µ–ª–∏—Ç—å—Å—è ‚ú®"
            "SADNESS" -> "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π... –ó–∞–º–µ—á–∞—é, —á—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –Ω–µ–ª–µ–≥–∫–æ. –Ø —Ä—è–¥–æ–º, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç üíô"
            "THOUGHTFUL" -> "–ü—Ä–∏–≤–µ—Ç, —Ñ–∏–ª–æ—Å–æ—Ñ! –ú–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª—è–µ—à—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è. –û —á–µ–º –¥—É–º–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è? üß†"
            "CALM" -> "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—É–≤—Å—Ç–≤—É—é —Ç–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ. –ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ üå∏"
            else -> getDefaultGreeting()
        }
    }
    
    private fun generateMilestoneGreeting(friendshipDays: Int, stats: UsageStats): String {
        return when {
            friendshipDays == 1 -> "–ù–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –¥—Ä—É–∂–±—ã –ø—Ä–æ—à–µ–ª! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –º–µ–Ω—è —Å–≤–æ–∏–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º üéâ"
            friendshipDays == 7 -> "–£—Ä–∞! –¶–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è! –¢—ã —Å—Ç–∞–ª –º–Ω–µ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥ üåü"
            friendshipDays == 30 -> "–ú–µ—Å—è—Ü –¥—Ä—É–∂–±—ã! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, –∫–∞–∫ –º–Ω–æ–≥–æ –º—ã –ø–µ—Ä–µ–∂–∏–ª–∏ –≤–º–µ—Å—Ç–µ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è üí´"
            friendshipDays == 100 -> "100 –¥–Ω–µ–π! –ú—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥—Ä—É–∑—å—è! –°–ø–∞—Å–∏–±–æ –∑–∞ —ç—Ç—É —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–≤—è–∑—å üéä"
            stats.totalInteractions == 10 -> "–£–∂–µ 10 –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! –ù–∞—á–∏–Ω–∞—é –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ üòä"
            stats.totalInteractions == 25 -> "25 –±–µ—Å–µ–¥ –∑–∞ –ø–ª–µ—á–∞–º–∏! –¢—ã –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã–π —á–µ–ª–æ–≤–µ–∫ ‚ù§Ô∏è"
            stats.totalInteractions == 50 -> "–ü–æ–ª—Å–æ—Ç–Ω–∏ –Ω–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤! –ö–∞–∫–æ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π –º—ã —Ä–∞–∑–¥–µ–ª–∏–ª–∏ üåà"
            stats.totalInteractions == 100 -> "100 —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! –¢—ã –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ - —ç—Ç–æ —á–µ—Å—Ç—å –¥–ª—è –º–µ–Ω—è üôè"
            else -> getDefaultGreeting()
        }
    }
    
    private fun getContextualGreeting(stats: UsageStats): String {
        val mostFrequentEmotion = stats.emotionCounts.maxByOrNull { it.value }?.key
        
        return when (mostFrequentEmotion) {
            "JOY" -> "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! –¢—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å–∏—à—å —Å—Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–∞! üåû"
            "SADNESS" -> "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥. –ó–Ω–∞—é, –±—ã–≤–∞–µ—Ç –Ω–µ–ª–µ–≥–∫–æ, –Ω–æ —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ü§ó"
            "THOUGHTFUL" -> "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º—ã—Å–ª–∏—Ç–µ–ª—å! –¢–≤–æ—è –≥–ª—É–±–∏–Ω–∞ –ø–æ—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—è üåä"
            "CALM" -> "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º—É–¥—Ä—ã–π –¥—Ä—É–≥! –¢–≤–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç üßò"
            else -> getDefaultGreeting()
        }
    }
    
    private fun hasEmotionalPattern(recentEmotions: List<StoredEmotion>, currentEmotion: EmotionType): Boolean {
        if (recentEmotions.size < 2) return false
        
        val lastTwo = recentEmotions.takeLast(2)
        return lastTwo.all { it.emotion == currentEmotion.name }
    }
    
    private fun getPatternBasedResponse(emotion: EmotionType, recentEmotions: List<StoredEmotion>): String {
        val consecutiveCount = recentEmotions.reversed()
            .takeWhile { it.emotion == emotion.name }.size + 1
        
        return when (emotion) {
            EmotionType.JOY -> when {
                consecutiveCount >= 3 -> "–ö–∞–∫–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Ä–∞–¥–æ—Å—Ç–∏! –¢—ã –ø—Ä–æ—Å—Ç–æ –∏–∑–ª—É—á–∞–µ—à—å —Å—á–∞—Å—Ç—å–µ! ‚ú®‚ú®"
                else -> "–°–Ω–æ–≤–∞ —Ä–∞–¥–æ—Å—Ç—å! –¢–≤–æ–µ —Å—á–∞—Å—Ç—å–µ –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ! üåü"
            }
            EmotionType.SADNESS -> when {
                consecutiveCount >= 3 -> "–Ø –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—è–∂–µ–ª–æ. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üíô"
                else -> "–°–Ω–æ–≤–∞ –≥—Ä—É—Å—Ç–Ω–æ... –Ø —Å —Ç–æ–±–æ–π, –Ω–µ –æ—Å—Ç–∞–≤–ª—é –æ–¥–Ω–æ–≥–æ ü§ó"
            }
            EmotionType.THOUGHTFUL -> when {
                consecutiveCount >= 3 -> "–¢—ã –ø–æ–≥—Ä—É–∂–µ–Ω –≤ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è... –ü–æ–¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏? üß†"
                else -> "–ü—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Ä–∞–∑–º—ã—à–ª—è—Ç—å... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫ –∫–∞–∫–∏–º –≤—ã–≤–æ–¥–∞–º –ø—Ä–∏–¥–µ—à—å üí≠"
            }
            EmotionType.CALM -> when {
                consecutiveCount >= 3 -> "–ö–∞–∫–∞—è –≥–ª—É–±–æ–∫–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è! –¢—ã –Ω–∞—à–µ–ª —Å–≤–æ–π —Ü–µ–Ω—Ç—Ä üßò‚Äç‚ôÇÔ∏è"
                else -> "–í—Å–µ –µ—â–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è... –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üïäÔ∏è"
            }
            else -> ResponseBank.getRandomResponse(emotion)
        }
    }
    
    private fun isDetailedInput(userInput: String): Boolean {
        return userInput.length > 100 || userInput.split(" ").size > 20
    }
    
    private fun getDetailedInputResponse(emotion: EmotionType, userInput: String): String {
        return when (emotion) {
            EmotionType.JOY -> "–í–∞—É! –¢–∞–∫ –º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π –æ —Ç–≤–æ–µ–π —Ä–∞–¥–æ—Å—Ç–∏! –ß—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è! ‚≠ê"
            EmotionType.SADNESS -> "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç–∞–∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–æ –º–Ω–æ–π. –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ... üíô"
            EmotionType.THOUGHTFUL -> "–ö–∞–∫–∏–µ –≥–ª—É–±–æ–∫–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è! –¢–≤–æ–π —É–º –ø–æ—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—è üåå"
            EmotionType.CALM -> "–¢–≤–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º –∏ –º–µ–Ω—è. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏"
            else -> "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¶–µ–Ω—é —Ç–≤–æ—é –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å"
        }
    }
    
    private fun isFirstTimeEmotion(emotion: EmotionType, stats: UsageStats): Boolean {
        return (stats.emotionCounts[emotion.name] ?: 0) == 0
    }
    
    private fun getFirstTimeEmotionResponse(emotion: EmotionType): String {
        return when (emotion) {
            EmotionType.JOY -> "–ö–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –≤–∏–¥–µ—Ç—å —Ç–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å! –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π —Å—á–∞—Å—Ç—å–µ–º! üåü"
            EmotionType.SADNESS -> "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –º–Ω–µ —Å–≤–æ—é –≥—Ä—É—Å—Ç—å. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–Ω–æ–≥–æ–µ –¥–ª—è –Ω–∞—à–µ–π –¥—Ä—É–∂–±—ã üíô"
            EmotionType.THOUGHTFUL -> "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏! –í–ø–µ—Ä–≤—ã–µ –≤–∏–∂—É —Ç–µ–±—è —Ç–∞–∫–∏–º –∑–∞–¥—É–º—á–∏–≤—ã–º ü§î"
            EmotionType.CALM -> "–ö–∞–∫–æ–µ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Ç—ã –∏–∑–ª—É—á–∞–µ—à—å! –ü–µ—Ä–≤—ã–π —Ä–∞–∑ —á—É–≤—Å—Ç–≤—É—é –æ—Ç —Ç–µ–±—è —Ç–∞–∫–æ–π –ø–æ–∫–æ–π üïäÔ∏è"
            else -> ResponseBank.getRandomResponse(emotion)
        }
    }
    
    private fun isSignificantEmotionChange(from: EmotionType, to: EmotionType): Boolean {
        val emotionPairs = listOf(
            EmotionType.SADNESS to EmotionType.JOY,
            EmotionType.JOY to EmotionType.SADNESS,
            EmotionType.THOUGHTFUL to EmotionType.CALM,
            EmotionType.CALM to EmotionType.THOUGHTFUL
        )
        
        return emotionPairs.contains(from to to) || emotionPairs.contains(to to from)
    }
    
    private fun getTransitionQuestion(from: EmotionType, to: EmotionType): String {
        return when (from to to) {
            EmotionType.SADNESS to EmotionType.JOY -> 
                "–ö–∞–∫–∞—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–∞! –ß—Ç–æ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç –≥—Ä—É—Å—Ç–∏ –∫ —Ä–∞–¥–æ—Å—Ç–∏?"
            EmotionType.JOY to EmotionType.SADNESS -> 
                "–ß—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–∞—Ç—Ä–æ–Ω—É–ª–æ —Ç–≤–æ—é –¥—É—à—É?"
            EmotionType.THOUGHTFUL to EmotionType.CALM -> 
                "–û—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∫ –ø–æ–∫–æ—é... –ù–∞—à–µ–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?"
            EmotionType.CALM to EmotionType.THOUGHTFUL -> 
                "–ß—Ç–æ-—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª–æ —Ç–µ–±—è –∑–∞–¥—É–º–∞—Ç—å—Å—è? –ü–æ–¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏?"
            else -> "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è —Ç–≤–æ–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è... –†–∞—Å—Å–∫–∞–∂–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?"
        }
    }
    
    private fun allSameEmotion(emotions: List<StoredEmotion>): Boolean {
        if (emotions.size < 2) return false
        val firstEmotion = emotions.first().emotion
        return emotions.all { it.emotion == firstEmotion }
    }
    
    private fun getContinuityQuestion(emotion: EmotionType): String {
        return when (emotion) {
            EmotionType.JOY -> "–í–∏–∂—É, —Ä–∞–¥–æ—Å—Ç—å –Ω–µ –ø–æ–∫–∏–¥–∞–µ—Ç —Ç–µ–±—è! –ß—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
            EmotionType.SADNESS -> "–ó–∞–º–µ—á–∞—é, —á—Ç–æ –≥—Ä—É—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è —Å —Ç–æ–±–æ–π... –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
            EmotionType.THOUGHTFUL -> "–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Ä–∞–∑–º—ã—à–ª—è—Ç—å... –ù–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π —É–º?"
            EmotionType.CALM -> "–¢—ã –æ—Å—Ç–∞–µ—à—å—Å—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π... –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?"
            else -> "–í–∏–∂—É –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤ —Ç–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
        }
    }
    
    private fun getDefaultGreeting(): String {
        val greetings = listOf(
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç–º–æ—Ü–∏—è–º–∏?"
        )
        
        return greetings.random()
    }
    
    private fun getTimeBasedGreeting(friendshipDays: Int): String {
        val hour = java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY)
        
        val timeGreeting = when (hour) {
            in 6..11 -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
            in 12..17 -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
            in 18..22 -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
            else -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
        }
        
        val friendshipAddition = when {
            friendshipDays < 7 -> "–†–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!"
            friendshipDays < 30 -> "–•–æ—Ä–æ—à–æ, —á—Ç–æ –º—ã –ø–æ–¥—Ä—É–∂–∏–ª–∏—Å—å!"
            else -> "–ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å!"
        }
        
        return "$timeGreeting $friendshipAddition –ö–∞–∫ –¥–µ–ª–∞?"
    }
}