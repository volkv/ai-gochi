package com.hackathon.echo.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.hackathon.echo.data.EmotionType
import com.hackathon.echo.data.PetState
import com.hackathon.echo.data.PetStates
import com.hackathon.echo.data.ResponseBank
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import java.util.*

data class InteractionHistory(
    val timestamp: Long,
    val userInput: String,
    val detectedEmotion: EmotionType,
    val echoResponse: String,
    val petStateBefore: PetState,
    val petStateAfter: PetState
)

class EchoViewModel : ViewModel() {
    
    private val _currentPetState = MutableStateFlow(PetStates.neutralState)
    val currentPetState: StateFlow<PetState> = _currentPetState.asStateFlow()
    
    private val _interactionHistory = MutableLiveData<List<InteractionHistory>>()
    val interactionHistory: LiveData<List<InteractionHistory>> = _interactionHistory
    
    private val _currentResponse = MutableStateFlow("")
    val currentResponse: StateFlow<String> = _currentResponse.asStateFlow()
    
    private val _isProcessingInput = MutableStateFlow(false)
    val isProcessingInput: StateFlow<Boolean> = _isProcessingInput.asStateFlow()
    
    init {
        _interactionHistory.value = emptyList()
    }
    
    fun processEmotionButton(emotion: EmotionType) {
        val previousState = _currentPetState.value
        val newState = PetStates.getStateByEmotion(emotion)
        val response = ResponseBank.getRandomResponse(emotion)
        
        _currentPetState.value = newState
        _currentResponse.value = response
        
        addToHistory(
            userInput = "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${getEmotionButtonText(emotion)}",
            detectedEmotion = emotion,
            echoResponse = response,
            petStateBefore = previousState,
            petStateAfter = newState
        )
    }
    
    fun processUserInput(text: String) {
        if (text.isBlank()) return
        
        _isProcessingInput.value = true
        
        val previousState = _currentPetState.value
        val detectedEmotion = detectEmotionFromText(text)
        val newState = PetStates.getStateByEmotion(detectedEmotion)
        val response = getContextualResponse(text, detectedEmotion)
        
        _currentPetState.value = newState
        _currentResponse.value = response
        _isProcessingInput.value = false
        
        addToHistory(
            userInput = text,
            detectedEmotion = detectedEmotion,
            echoResponse = response,
            petStateBefore = previousState,
            petStateAfter = newState
        )
    }
    
    fun resetToNeutral() {
        _currentPetState.value = PetStates.neutralState
        _currentResponse.value = ResponseBank.getRandomResponse(EmotionType.NEUTRAL)
    }
    
    fun getRandomResponseForCurrentEmotion(): String {
        return ResponseBank.getRandomResponse(_currentPetState.value.emotion)
    }
    
    fun getLastNInteractions(n: Int): List<InteractionHistory> {
        return _interactionHistory.value?.takeLast(n) ?: emptyList()
    }
    
    fun getTotalInteractionsCount(): Int {
        return _interactionHistory.value?.size ?: 0
    }
    
    fun getEmotionStatistics(): Map<EmotionType, Int> {
        val history = _interactionHistory.value ?: return emptyMap()
        return history.groupBy { it.detectedEmotion }
            .mapValues { it.value.size }
    }
    
    private fun detectEmotionFromText(text: String): EmotionType {
        val lowercaseText = text.lowercase(Locale.getDefault())
        
        val joyKeywords = listOf(
            "—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç–ª–∏–≤", "–æ—Ç–ª–∏—á–Ω–æ", "–∑–¥–æ—Ä–æ–≤–æ", "—Å—É–ø–µ—Ä", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", 
            "–≤–æ—Å—Ç–æ—Ä–≥", "—É—Ä–∞", "–ø–æ–±–µ–¥–∞", "—É—Å–ø–µ—Ö", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–ø–æ–∑–¥—Ä–∞–≤—å", "–ø—Ä–∞–∑–¥–Ω–∏–∫"
        )
        
        val sadnessKeywords = listOf(
            "–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", "—Ç—Ä–µ–≤–æ–≥–∞", "–ø—Ä–æ–±–ª–µ–º–∞",
            "–±–æ–ª–∏—Ç", "—Ç—è–∂–µ–ª–æ", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "–æ–¥–∏–Ω–æ–∫–æ", "—Å—Ç—Ä–∞—à–Ω–æ"
        )
        
        val thoughtfulKeywords = listOf(
            "–¥—É–º–∞—é", "—Ä–∞–∑–º—ã—à–ª—è—é", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–±—É–¥—É—â–µ–µ", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "—Å–º—ã—Å–ª",
            "–≤–æ–ø—Ä–æ—Å", "–ø–æ—á–µ–º—É", "–∑–∞–¥–∞—é—Å—å", "–º—ã—Å–ª–∏", "–∞–Ω–∞–ª–∏–∑", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–º—É–¥—Ä–æ—Å—Ç—å"
        )
        
        val calmKeywords = listOf(
            "—Å–ø–æ–∫–æ–π–Ω–æ", "—Ç–∏—à–∏–Ω–∞", "–ø–æ–∫–æ–π", "—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω", "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω", "–º–µ–¥–∏—Ç–∞—Ü–∏—è",
            "—Ä–µ–ª–∞–∫—Å", "–¥—ã—à—É", "–Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å", "–≥–∞—Ä–º–æ–Ω–∏—è", "–±–∞–ª–∞–Ω—Å", "–º–∏—Ä", "zen"
        )
        
        var joyScore = 0
        var sadnessScore = 0
        var thoughtfulScore = 0
        var calmScore = 0
        
        joyKeywords.forEach { keyword ->
            if (lowercaseText.contains(keyword)) joyScore++
        }
        
        sadnessKeywords.forEach { keyword ->
            if (lowercaseText.contains(keyword)) sadnessScore++
        }
        
        thoughtfulKeywords.forEach { keyword ->
            if (lowercaseText.contains(keyword)) thoughtfulScore++
        }
        
        calmKeywords.forEach { keyword ->
            if (lowercaseText.contains(keyword)) calmScore++
        }
        
        val maxScore = maxOf(joyScore, sadnessScore, thoughtfulScore, calmScore)
        
        return when {
            maxScore == 0 -> EmotionType.NEUTRAL
            joyScore == maxScore -> EmotionType.JOY
            sadnessScore == maxScore -> EmotionType.SADNESS  
            thoughtfulScore == maxScore -> EmotionType.THOUGHTFUL
            calmScore == maxScore -> EmotionType.CALM
            else -> EmotionType.NEUTRAL
        }
    }
    
    private fun getContextualResponse(userInput: String, emotion: EmotionType): String {
        val history = _interactionHistory.value ?: emptyList()
        val recentEmotions = history.takeLast(3).map { it.detectedEmotion }
        
        return when {
            recentEmotions.contains(emotion) && recentEmotions.size >= 2 -> {
                getPersonalizedResponse(emotion, true)
            }
            userInput.length > 50 -> {
                getDetailedResponse(emotion)
            }
            else -> {
                ResponseBank.getRandomResponse(emotion)
            }
        }
    }
    
    private fun getPersonalizedResponse(emotion: EmotionType, isRepeat: Boolean): String {
        return when (emotion) {
            EmotionType.JOY -> if (isRepeat) {
                "–í–∏–∂—É, —Ä–∞–¥–æ—Å—Ç—å –Ω–µ –ø–æ–∫–∏–¥–∞–µ—Ç —Ç–µ–±—è! –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! ‚ú®"
            } else {
                ResponseBank.getRandomResponse(emotion)
            }
            EmotionType.SADNESS -> if (isRepeat) {
                "–Ø –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å —Ç–æ–±–æ–π. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø—Ä–æ–π–¥–µ–º —á–µ—Ä–µ–∑ —ç—Ç–æ... üíô"
            } else {
                ResponseBank.getRandomResponse(emotion)
            }
            EmotionType.THOUGHTFUL -> if (isRepeat) {
                "–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Ä–∞–∑–º—ã—à–ª—è—Ç—å... –≠—Ç–æ –ø—É—Ç—å –∫ –≥–ª—É–±–æ–∫–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ üß†"
            } else {
                ResponseBank.getRandomResponse(emotion)
            }
            EmotionType.CALM -> if (isRepeat) {
                "–¢–≤–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ—â–µ –≥–ª—É–±–∂–µ... üßò"
            } else {
                ResponseBank.getRandomResponse(emotion)
            }
            else -> ResponseBank.getRandomResponse(emotion)
        }
    }
    
    private fun getDetailedResponse(emotion: EmotionType): String {
        return when (emotion) {
            EmotionType.JOY -> "–¢–∞–∫ –º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π! –Ø —á—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ –≤–∞–∂–Ω–∞ –¥–ª—è —Ç–µ–±—è —ç—Ç–∞ —Ä–∞–¥–æ—Å—Ç—å! ‚≠ê"
            EmotionType.SADNESS -> "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é... üíô"
            EmotionType.THOUGHTFUL -> "–ö–∞–∫–∏–µ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è! –¢–≤–æ–∏ –º—ã—Å–ª–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –∏ –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è üí≠"
            EmotionType.CALM -> "–¢–≤–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –∏ –º–µ–Ω—è. –ú—ã –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ üå∏"
            else -> "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–æ –º–Ω–æ–π!"
        }
    }
    
    private fun addToHistory(
        userInput: String,
        detectedEmotion: EmotionType,
        echoResponse: String,
        petStateBefore: PetState,
        petStateAfter: PetState
    ) {
        val currentHistory = _interactionHistory.value ?: emptyList()
        val newInteraction = InteractionHistory(
            timestamp = System.currentTimeMillis(),
            userInput = userInput,
            detectedEmotion = detectedEmotion,
            echoResponse = echoResponse,
            petStateBefore = petStateBefore,
            petStateAfter = petStateAfter
        )
        
        val updatedHistory = currentHistory + newInteraction
        val limitedHistory = if (updatedHistory.size > 50) {
            updatedHistory.takeLast(50)
        } else {
            updatedHistory
        }
        
        _interactionHistory.value = limitedHistory
    }
    
    private fun getEmotionButtonText(emotion: EmotionType): String {
        return when (emotion) {
            EmotionType.JOY -> "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–¥–æ—Å—Ç—å—é"
            EmotionType.SADNESS -> "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç—Ä–µ–≤–æ–≥–µ"
            EmotionType.THOUGHTFUL -> "–ü–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å"
            EmotionType.CALM -> "–ü–æ–±—ã—Ç—å –≤ —Ç–∏—à–∏–Ω–µ"
            EmotionType.NEUTRAL -> "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        }
    }
}